/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { DAOFactory, DAOFactoryInterface } from "../DAOFactory";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IDAOGovernorDeployer",
        name: "_governorDeployer",
        type: "address",
      },
      {
        internalType: "contract IDAOTokenDeployer",
        name: "_tokenDeployer",
        type: "address",
      },
      {
        internalType: "contract IDAOWrappedTokenDeployer",
        name: "_wrappedTokenDeployer",
        type: "address",
      },
      {
        internalType: "contract IDAOProposerDeployer",
        name: "_proposerDeployer",
        type: "address",
      },
      {
        internalType: "contract IERC721",
        name: "_turnstile",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "deployer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "dao",
        type: "address",
      },
    ],
    name: "DAOCreated",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "string",
            name: "description",
            type: "string",
          },
          {
            internalType: "string",
            name: "image",
            type: "string",
          },
        ],
        internalType: "struct DaoData",
        name: "_data",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "string",
            name: "symbol",
            type: "string",
          },
          {
            internalType: "contract IERC20",
            name: "assetToken",
            type: "address",
          },
        ],
        internalType: "struct DaoWrappedToken",
        name: "_wrappedToken",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "quorumFraction",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "votingDelay",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "votingPeriod",
            type: "uint256",
          },
        ],
        internalType: "struct DaoParams",
        name: "_params",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "minimalVotingPower",
            type: "uint256",
          },
        ],
        internalType: "struct DaoProposer",
        name: "_proposer",
        type: "tuple",
      },
    ],
    name: "createDAOExistingToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "string",
            name: "description",
            type: "string",
          },
          {
            internalType: "string",
            name: "image",
            type: "string",
          },
        ],
        internalType: "struct DaoData",
        name: "_data",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "string",
            name: "symbol",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "initialSupply",
            type: "uint256",
          },
        ],
        internalType: "struct DaoToken",
        name: "_token",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "quorumFraction",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "votingDelay",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "votingPeriod",
            type: "uint256",
          },
        ],
        internalType: "struct DaoParams",
        name: "_params",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "minimalVotingPower",
            type: "uint256",
          },
        ],
        internalType: "struct DaoProposer",
        name: "_proposer",
        type: "tuple",
      },
    ],
    name: "createDAONewToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "daos",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "getDAO",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDAOCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "governorDeployer",
    outputs: [
      {
        internalType: "contract IDAOGovernorDeployer",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "proposerDeployer",
    outputs: [
      {
        internalType: "contract IDAOProposerDeployer",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenDeployer",
    outputs: [
      {
        internalType: "contract IDAOTokenDeployer",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "wrappedTokenDeployer",
    outputs: [
      {
        internalType: "contract IDAOWrappedTokenDeployer",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b50604051610d79380380610d7983398101604081905261002f9161009d565b600080546001600160a01b03199081166001600160a01b03978816179091556001805482169587169590951790945560028054851693861693909317909255600380549093169084161790915516608052610112565b6001600160a01b038116811461009a57600080fd5b50565b600080600080600060a086880312156100b557600080fd5b85516100c081610085565b60208701519095506100d181610085565b60408701519094506100e281610085565b60608701519093506100f381610085565b608087015190925061010481610085565b809150509295509295909350565b608051610c4c61012d60003960006102e10152610c4c6000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c806369354f351161006657806369354f35146100ff578063b66b5eb114610112578063c856fef81461014f578063ccbbd26014610162578063f143d6941461017557600080fd5b80632a2dae0a146100985780633a479fb8146100c8578063438bbbf4146100d95780635a29426c146100ec575b600080fd5b6001546100ab906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6004546040519081526020016100bf565b6002546100ab906001600160a01b031681565b6100ab6100fa366004610694565b610188565b6003546100ab906001600160a01b031681565b6101256101203660046108a1565b6101b8565b604080516001600160a01b03948516815292841660208401529216918101919091526060016100bf565b61012561015d366004610992565b6103d2565b6100ab610170366004610694565b6104fe565b6000546100ab906001600160a01b031681565b60006004828154811061019d5761019d610a5a565b6000918252602090912001546001600160a01b031692915050565b6003548151604051634caa8b7160e01b81526000928392839283926001600160a01b031691634caa8b71916101f4919060040190815260200190565b6020604051808303816000875af1158015610213573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102379190610a70565b905060008061024589610528565b9150915060006102578b8a85876105b4565b60405163c42cf53560e01b81526001600160a01b0380831660048301529192509085169063c42cf535906024015b600060405180830381600087803b15801561029f57600080fd5b505af11580156102b3573d6000803e3d6000fd5b50506040516323b872dd60e01b81523060048201526001600160a01b038481166024830152604482018690527f00000000000000000000000000000000000000000000000000000000000000001692506323b872dd9150606401600060405180830381600087803b15801561032757600080fd5b505af115801561033b573d6000803e3d6000fd5b5050600480546001810182556000919091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b0319166001600160a01b0385169081179091556040519081523392507fc5d7346247c6d2ba52de925ca697bf6c93e96e0b51e41bb21a27276915d8a180915060200160405180910390a29a91995091975095505050505050565b6003548151604051634caa8b7160e01b81526000928392839283926001600160a01b031691634caa8b719161040e919060040190815260200190565b6020604051808303816000875af115801561042d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104519190610a70565b905060008061045f89610650565b9150915060006104718b8a85876105b4565b60405163c42cf53560e01b81526001600160a01b0380831660048301529192509085169063c42cf53590602401600060405180830381600087803b1580156104b857600080fd5b505af11580156104cc573d6000803e3d6000fd5b505060405163f2fde38b60e01b81526001600160a01b0384811660048301528616925063f2fde38b9150602401610285565b6004818154811061050e57600080fd5b6000918252602090912001546001600160a01b0316905081565b60025481516020830151604080850151905163dc92c0e360e01b815260009485946001600160a01b039091169363dc92c0e393610569933090600401610ada565b60408051808303816000875af1158015610587573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ab9190610b24565b91509150915091565b6000805485516020808801516040808a01518951938a01518a830151925163fec7a08160e01b81526001600160a01b039097169663fec7a08196610604969095948c938c93909190600401610b52565b6020604051808303816000875af1158015610623573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106479190610a70565b95945050505050565b6001548151602083015160408085015190516318ae4e3160e31b815260009485946001600160a01b039091169363c572718893610569933391903090600401610bc6565b6000602082840312156106a657600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff811182821017156106e6576106e66106ad565b60405290565b600082601f8301126106fd57600080fd5b813567ffffffffffffffff80821115610718576107186106ad565b604051601f8301601f19908116603f01168101908282118183101715610740576107406106ad565b8160405283815286602085880101111561075957600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006060828403121561078b57600080fd5b6107936106c3565b9050813567ffffffffffffffff808211156107ad57600080fd5b6107b9858386016106ec565b835260208401359150808211156107cf57600080fd5b6107db858386016106ec565b602084015260408401359150808211156107f457600080fd5b50610801848285016106ec565b60408301525092915050565b6001600160a01b038116811461082257600080fd5b50565b60006060828403121561083757600080fd5b61083f6106c3565b905081358152602082013560208201526040820135604082015292915050565b60006020828403121561087157600080fd5b6040516020810181811067ffffffffffffffff82111715610894576108946106ad565b6040529135825250919050565b60008060008060c085870312156108b757600080fd5b843567ffffffffffffffff808211156108cf57600080fd5b6108db88838901610779565b955060208701359150808211156108f157600080fd5b908601906060828903121561090557600080fd5b61090d6106c3565b82358281111561091c57600080fd5b6109288a8286016106ec565b82525060208301358281111561093d57600080fd5b6109498a8286016106ec565b6020830152506040830135925061095f8361080d565b8260408201528095505050506109788660408701610825565b91506109878660a0870161085f565b905092959194509250565b60008060008060c085870312156109a857600080fd5b843567ffffffffffffffff808211156109c057600080fd5b6109cc88838901610779565b955060208701359150808211156109e257600080fd5b90860190606082890312156109f657600080fd5b6109fe6106c3565b823582811115610a0d57600080fd5b610a198a8286016106ec565b825250602083013582811115610a2e57600080fd5b610a3a8a8286016106ec565b602083015250604092830135838201529450610978918891508701610825565b634e487b7160e01b600052603260045260246000fd5b600060208284031215610a8257600080fd5b8151610a8d8161080d565b9392505050565b6000815180845260005b81811015610aba57602081850181015186830182015201610a9e565b506000602082860101526020601f19601f83011685010191505092915050565b608081526000610aed6080830187610a94565b8281036020840152610aff8187610a94565b6001600160a01b03958616604085015293909416606090920191909152509392505050565b60008060408385031215610b3757600080fd5b8251610b428161080d565b6020939093015192949293505050565b6000610100808352610b668184018c610a94565b90508281036020840152610b7a818b610a94565b90508281036040840152610b8e818a610a94565b6001600160a01b0398891660608501529690971660808301525060a081019390935260c083019190915260e090910152949350505050565b60a081526000610bd960a0830188610a94565b8281036020840152610beb8188610a94565b6001600160a01b0396871660408501526060840195909552505092166080909201919091529291505056fea2646970667358221220cb536da1f6aaa8346d67a89d044d154ec92ea62e521691151cd0e46ef37b8ee764736f6c63430008110033";

type DAOFactoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DAOFactoryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DAOFactory__factory extends ContractFactory {
  constructor(...args: DAOFactoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _governorDeployer: PromiseOrValue<string>,
    _tokenDeployer: PromiseOrValue<string>,
    _wrappedTokenDeployer: PromiseOrValue<string>,
    _proposerDeployer: PromiseOrValue<string>,
    _turnstile: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DAOFactory> {
    return super.deploy(
      _governorDeployer,
      _tokenDeployer,
      _wrappedTokenDeployer,
      _proposerDeployer,
      _turnstile,
      overrides || {}
    ) as Promise<DAOFactory>;
  }
  override getDeployTransaction(
    _governorDeployer: PromiseOrValue<string>,
    _tokenDeployer: PromiseOrValue<string>,
    _wrappedTokenDeployer: PromiseOrValue<string>,
    _proposerDeployer: PromiseOrValue<string>,
    _turnstile: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _governorDeployer,
      _tokenDeployer,
      _wrappedTokenDeployer,
      _proposerDeployer,
      _turnstile,
      overrides || {}
    );
  }
  override attach(address: string): DAOFactory {
    return super.attach(address) as DAOFactory;
  }
  override connect(signer: Signer): DAOFactory__factory {
    return super.connect(signer) as DAOFactory__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DAOFactoryInterface {
    return new utils.Interface(_abi) as DAOFactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DAOFactory {
    return new Contract(address, _abi, signerOrProvider) as DAOFactory;
  }
}
